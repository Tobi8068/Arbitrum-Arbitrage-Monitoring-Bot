Arbitrage SCANNER Bot Development and Arbitrum Node setup

The scanner will scan a maximum of 30 pairs across three exchanges initially. For this purpose, WebSocket connections will be established on my full Arbitrum node. Why a full node? Because only in this way can we install WebSockets that will be useful to us, and only in this way can the execution bot submit smart contracts to complete transactions.
Regarding WebSockets, they need to be optimized so that they initiate a process the moment the head changes, and after loading the data from the node, the same data is immediately sent via IPC shared memory to the scanner bot. The Arbitrum node must create two IPC ports for communication—one for the scanner bot and the other for the bot that executes transactions.
Each WebSocket will contain 10 pairs from two DEXs within a single WebSocket connection, covering all three exchanges. Additionally, an RPC port needs to be opened for liquidity fetching. Liquidity will be checked every 3 seconds and added as a pre-fetch in the scanner bot's database to avoid the need to fetch liquidity every time via WebSocket.
The scanner bot will continuously check all 30 possible arbitrage opportunities in parallel across the three DEXs. The liquidity tiers and minimum price difference requirements are as follows:
•	Liquidity between $20,000 - $50,000 → Minimum price difference 1.8% for trades between $500 - $1,500
•	Liquidity between $50,000 - $100,000 → Minimum price difference 1.6% for trades between $2,000 - $4,000
•	Liquidity between $100,000 - $500,000 → Minimum price difference 1.2% for trades between $2,000 - $4,000
•	Liquidity above $1,000,000 → Minimum price difference 0.9% for trades between $20,000 - $30,000
After this, calculations for slippage and gas fees are performed, which are very low on the Arbitrum node. Then, another IPC shared memory exchange occurs between the scanner bot and the execution bot to finalize transactions efficiently.
Ports and type of comunication
✅ 1. IPC (Inter-Process Communication) Ports (3)
✅ IPC Port 1 → Scanner Bot ↔ Arbitrum Node (WebSocket communication)
✅ IPC Port 2 → Execution Bot ↔ Arbitrum Node (Transaction execution)
✅ IPC Port 3 → Scanner Bot ↔ Execution Bot (Arbitrage signal exchange)
🔹 Total IPC Ports: 3
✅ 2. RPC (Remote Procedure Call) Ports (2)
✅ RPC Port 1 → Private RPC for Execution Bot (Real-time liquidity & price verification before transaction)
✅ RPC Port 2 → Batch RPC for all DEXs (Uniswap, SushiSwap, Camelot) (Fetching liquidity every 5 seconds)
🔹 Total RPC Ports: 2
Final Structure for Arbitrage Bot Development
📌 Step 1: Full Arbitrum Node Installation
💰 Budget: $200
⏳ Estimated Time: 3-5 days
Tasks:
✅ Install a full Arbitrum Node on VPS
✅ Configure two IPC ports for communication:
•	1 for Scanner Bot
•	1 for Execution Bot
✅ Confirm batch RPC requests and ensure server stability
🔹 Milestone: Payment upon successful installation and testing
________________________________________
📌 Step 2: Private RPC & Liquidity Fetching
💰 Budget: $150
⏳ Estimated Time: 2-4 days
Tasks:
✅ Open an RPC port for liquidity fetching
✅ Integrate a pre-fetch system to store liquidity data (every 3 seconds)
✅ Test and verify batch RPC requests
🔹 Milestone: Payment upon successful verification
________________________________________
📌 Step 3: Scanner Bot Core Functionality (Optimized)
💰 Total Budget: $400
⏳ Estimated Time: 5-7 days
Tasks:
✅ Limit scanning to 30 pairs across 3 WebSocket connections
✅ Allocate WebSocket streams per two DEXs:
•	WebSocket 1: Camelot / Uniswap
•	WebSocket 2: Camelot / Pancake
•	WebSocket 3: Pancake / Uniswap
✅ Each WebSocket processes 10 pairs
✅ Scanner initiates scanning upon head change detection
✅ Data from WebSocket is transmitted via IPC shared memory to Scanner Bot
🔹 Milestone 1: WebSocket configuration – $200
🔹 Milestone 2: IPC communication & testing – $200
________________________________________
📌 Step 4: Liquidity Tiers & WebSocket Optimization
💰 Total Budget: $650
⏳ Estimated Time: 6-8 days
Tasks:
✅ Categorize pairs by liquidity:
•	Tier 1: $20,000 - $50,000 (min. price difference 1.8%)
•	Tier 2: $50,000 - $100,000 (min. price difference 1.6%)
•	Tier 3: $100,000 - $500,000 (min. price difference 1.2%)
•	Tier 4: $1,000,000+ (min. price difference 0.9%)
✅ Optimize WebSocket processing for each of the three WebSocket connections
✅ Implement Batch RPC for all DEXs (Uniswap, SushiSwap, Camelot) (Fetching liquidity every 3 seconds)
✅ Liquidity data is stored in a database every 3 seconds
🔹 Milestone 1: Liquidity Tiering – $200
🔹 Milestone 2: WebSocket integration – $200
🔹 Milestone 3: RPC Optimization – $250
________________________________________
📌 Step 5: Arbitrage Detection & Signal Processing
💰 Total Budget: $800
⏳ Estimated Time: 5-7 days
Tasks:
✅ Continuous monitoring of all 30 arbitrage possibilities in real-time
✅ Integration of new profitability logic based on liquidity tiers
✅ Dynamic minimum profit threshold per tier
✅ IPC communication for fast arbitrage signal transmission
✅ Slippage & Gas Fee filters
🔹 Milestone 1: Arbitrage detection – $250
🔹 Milestone 2: Profitability & slippage control – $300
🔹 Milestone 3: IPC Signal Processing – $250
________________________________________
📌 Step 6: Scanner Bot Final Testing & Deployment
💰 Total Budget: $1300
⏳ Estimated Time: 5-7 days
Tasks:
✅ Simulated testing of the bot in a sandbox environment
✅ Validation of arbitrage signals against real market data
✅ Optimization to achieve sub-30ms latency
✅ Final integration with Execution Bot via IPC shared memory
📅 GOING LIVE: 01.05.2025
✅ 14-day post-launch support
✅ Critical bug fixes within 48 hours
✅ Optimization for stability
